AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description:
  CRUD de Producto con Node.js, NestJS, AWS Lambda y API Gateway

Globals:
  Function:
    CodeUri: dist/
    Timeout: 10
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    MemorySize: 1024
    AutoPublishAlias: dev
    Tracing: Active
    Environment:
      Variables:
        #Apunta a la tabla existente seg√∫n el stage
        TABLENAME: !Sub "Producto-${Environment}"
Parameters:
  Environment:
    Type: String
    Default: "dev"
    Description: "El entorno (e.g. dev, prod)"

Resources:
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Backend Node.js NestJS API 
      Description: My AWS API Gateway config
      EndpointConfiguration:
        Types:
          - REGIONAL

  ResourceProductoNode:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: productos
      RestApiId: !Ref MyApi

  ResourceProductoNodeId:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ResourceProductoNode
      PathPart: "{id}"
      RestApiId: !Ref MyApi

  ProductoNodeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: MOCK
        RequestTemplates:
          "application/json": "{ \"statusCode\": 200 }"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNode
      RestApiId: !Ref MyApi

  ProductoNodeIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: MOCK
        RequestTemplates:
          "application/json": "{ \"statusCode\": 200 }"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNodeId
      RestApiId: !Ref MyApi

  ProductoNodeGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        RequestTemplates:
          "application/json": "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations"
          - Arn: !GetAtt ReadProductoNodeFunction.Arn
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNode
      RestApiId: !Ref MyApi

  ProductoNodeGetByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        RequestTemplates:
          "application/json": "{  \"statusCode\": 200 }"
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations"
          - Arn: !GetAtt BusquedaProductoNodeFunction.Arn
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNodeId
      RestApiId: !Ref MyApi

  ProductoNodePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt CrearProductoNodeFunction.Arn
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNode
      RestApiId: !Ref MyApi

  ProductoNodeUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambArn}/invocations"
          - lambArn: !GetAtt UpdateProductoNodeFunction.Arn
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNodeId
      RestApiId: !Ref MyApi

  ProductoNodeDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type, X-UserId, X-Roles, X-Custom-Header, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdarn}/invocations"
          - lambdarn: !GetAtt DeleteProductoNodeFunction.Arn
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: productos
      ResourceId: !Ref ResourceProductoNodeId
      RestApiId: !Ref MyApi

  #RESTful
  ReadProductoNodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CustomLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Producto-${Environment}"

  ReadProductoNodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ReadProductoNode
      Handler: handlers/producto/readProducto.handler
      Runtime: nodejs18.x
      Role: !GetAtt ReadProductoNodeFunctionRole.Arn
      Events:
        ReadRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /productos
            Method: GET
    DependsOn:
      - ReadProductoNodeFunctionRole

  ReadProductoNodeInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReadProductoNodeInvokePolicy
      Roles:
        - !Ref ReadProductoNodeFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ReadProductoNodeFunction}

  ReadProductoNodeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ReadProductoNodeFunction}"
      RetentionInDays: 1

  BusquedaProductoNodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CustomLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Producto-${Environment}"

  BusquedaProductoNodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BusquedaProductoNode
      Handler: handlers/producto/busquedaProducto.handler
      Runtime: nodejs18.x
      Role: !GetAtt BusquedaProductoNodeFunctionRole.Arn
      Events:
        BusquedaRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /productos/{id}
            Method: GET
    DependsOn:
      - BusquedaProductoNodeFunctionRole

  BusquedaProductoNodeInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BusquedaProductoNodeInvokePolicy
      Roles:
        - !Ref BusquedaProductoNodeFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BusquedaProductoNodeFunction}

  BusquedaProductoNodeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BusquedaProductoNodeFunction}"
      RetentionInDays: 1

  CrearProductoNodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CustomLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Producto-${Environment}"

  CrearProductoNodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CrearProductoNode
      Handler: handlers/producto/crearProducto.handler
      Runtime: nodejs18.x
      Role: !GetAtt CrearProductoNodeFunctionRole.Arn
      Events:
        CrearRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /productos
            Method: POST
    DependsOn:
      - CrearProductoNodeFunctionRole

  CrearProductoNodeInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CrearProductoNodeInvokePolicy
      Roles:
        - !Ref CrearProductoNodeFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CrearProductoNodeFunction}

  CrearProductoNodeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CrearProductoNodeFunction}"
      RetentionInDays: 1

  UpdateProductoNodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CustomLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Producto-${Environment}"

  UpdateProductoNodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateProductoNode
      Handler: handlers/producto/updateProducto.handler
      Runtime: nodejs18.x
      Role: !GetAtt UpdateProductoNodeFunctionRole.Arn
      Events:
        PutRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /productos/{id}
            Method: PUT
    DependsOn:
      - UpdateProductoNodeFunctionRole

  UpdateProductoNodeInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UpdateProductoNodeInvokePolicy
      Roles:
        - !Ref UpdateProductoNodeFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateProductoNodeFunction}

  UpdateProductoNodeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UpdateProductoNodeFunction}"
      RetentionInDays: 1

  DeleteProductoNodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CustomLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Producto-${Environment}"

  DeleteProductoNodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteProductoNode
      Handler: handlers/producto/deleteProducto.handler
      Runtime: nodejs18.x
      Role: !GetAtt DeleteProductoNodeFunctionRole.Arn
      Events:
        DeleteRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /productos/{id}
            Method: DELETE
    DependsOn:
      - DeleteProductoNodeFunctionRole

  DeleteProductoNodeInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DeleteProductoNodeInvokePolicy
      Roles:
        - !Ref DeleteProductoNodeFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DeleteProductoNodeFunction}

  DeleteProductoNodeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteProductoNodeFunction}"
      RetentionInDays: 1

  ProductoNodeGetApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyApi
      - ReadProductoNodeFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReadProductoNodeFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/productos

  ProductoNodePostApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyApi
      - CrearProductoNodeFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CrearProductoNodeFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/productos

  ProductoNodeGetByIdApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyApi
      - BusquedaProductoNodeFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BusquedaProductoNodeFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/productos/{id}

  ProductoNodeUpdateApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyApi
      - UpdateProductoNodeFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpdateProductoNodeFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/PUT/productos/{id}

  ProductoNodeDeleteApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyApi
      - DeleteProductoNodeFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeleteProductoNodeFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/DELETE/productos/{id}

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ProductoNodeGetMethod
      - ProductoNodeGetByIdMethod
      - ProductoNodePostMethod
      - ProductoNodeUpdateMethod
      - ProductoNodeDeleteMethod
    Properties:
      RestApiId: !Ref MyApi
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod" 
